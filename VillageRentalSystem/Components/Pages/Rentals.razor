@page "/rentals"
@using System.Collections.Generic
@using System.IO
@using System.Linq
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using MySql.Data.MySqlClient
@using System.Data;

<div class="container">
    <header class="my-4">
        <h1>Rental Management</h1>
        <button class="btn btn-primary" @onclick="ShowAddRentalModal">Add New Rental</button>
    </header>

    <section class="my-4">
        <h2>Rental Records</h2>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th scope="col">Rental ID</th>
                    <th scope="col">Date</th>
                    <th scope="col">Customer ID</th>
                    <th scope="col">Equipment ID</th>
                    <th scope="col">Rental Date</th>
                    <th scope="col">Return Date</th>
                    <th scope="col">Cost</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var rental in filteredRentals)
                {
                    <tr @onclick="() => ShowEditRentalModal(rental)">
                        <td>@rental.RentalID</td>
                        <td>@rental.Date.ToShortDateString()</td>
                        <td>@rental.CustomerID</td>
                        <td>@rental.EquipmentID</td>
                        <td>@rental.RentalDate.ToShortDateString()</td>
                        <td>@rental.ReturnDate?.ToShortDateString()</td>
                        <td>@rental.Cost.ToString("C")</td>
                        <td>
                            <button class="btn btn-danger" @onclick:stopPropagation @onclick="() => DeleteRental(rental.RentalID)">Delete</button>
                            <button class="btn btn-secondary" @onclick="() => ShowEditRentalModal(rental)">Edit</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </section>

    <!-- Add/Edit Rental Modal -->
    <div class="modal" tabindex="-1" role="dialog" style="display:@(showRentalModal ? "block" : "none")">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@rentalModalTitle</h5>
                    <button type="button" class="close" @onclick="CloseRentalModal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    @* <div class="form-group">
                        <label for="rentalid">rental id</label>
                        <input type="number" class="form-control" id="rentalid" @bind="currentrental.rentalid" />
                    </div> *@
                    <div class="form-group">
                        <label for="date">Date</label>
                        <input type="date" class="form-control" id="date" @bind="currentRental.Date" readonly />
                    </div>
                    <div class="form-group">
                        <label for="customerID">Customer ID</label>
                        <select class="form-control" id="customerID" @bind="currentRental.CustomerID">
                            <option value="">Select Customer</option>
                            @foreach (var customer in customerList)
                            {
                                <option value="@customer.CustomerId">@customer.FullName</option>
                            }
                        </select>
                    </div>
                    <label for="equipmentID">Equipment ID</label>
                    <select class="form-control" id="equipmentID" @bind="currentRental.EquipmentID" @bind:event="oninput" @onchange="async () => await UpdateCost()">
                        <option value="">Select Equipment</option> 
                        @foreach (var equipment in equipmentList)
                        {
                            <option value="@equipment.EquipmentID">@equipment.Name</option>
                        }
                    </select>
                    <div class="form-group">
                        <label for="rentalDate">Rental Date</label>
                        <input type="date" class="form-control" id="rentalDate" @bind="currentRental.RentalDate" @bind:event="oninput" @onchange="async () => await UpdateCost()" min="2024-02-02" max="2100-12-31" />
                    </div>
                    <div class="form-group">
                        <label for="returnDate">Return Date</label>
                        <input type="date" class="form-control" id="returnDate" @bind="currentRental.ReturnDate" @bind:event="oninput" @onchange="async () => await UpdateCost()" min="2024-02-02" max="2100-12-31" />
                    </div>
                    <div class="form-group">
                        <label for="cost">Cost</label>
                        <input type="number" step="0.01" class="form-control" id="cost" @bind="currentRental.Cost" readonly />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseRentalModal">Close</button>
                    @* <button type="button" class="btn btn-primary" @onclick="UpdateCost">Save changes</button> *@
                    <button type="button" class="btn btn-primary" @onclick="SaveRental">Save changes</button>

                </div>
            </div>
        </div>
    </div>

    <!-- Error Modal -->
    <div class="modal" tabindex="-1" role="dialog" style="display:@(showErrorModal ? "block" : "none")">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Error</h5>
                    <button type="button" class="close" @onclick="CloseErrorModal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Please fill in all the fields.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseErrorModal">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Error Modal for Equipment ID Not Found -->
<div class="modal" tabindex="-1" role="dialog" style="display:@(showErrorModal ? "block" : "none")">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Error</h5>
                <button type="button" class="close" @onclick="CloseErrorModal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p>@errorMessage</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseErrorModal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Rental> rentalList = new List<Rental>();
    private List<Rental> filteredRentals = new List<Rental>();
    private List<Customer> customerList = new List<Customer>();
    private Rental currentRental = new Rental();
    private bool showRentalModal = false;
    private bool showErrorModal = false;
    private string rentalModalTitle = "";
    private string searchTerm = "";
    private List<EquipmentItem> equipmentList = new List<EquipmentItem>();
    private string errorMessage = "";

    private readonly string connectionString = "server=127.0.0.1;user=root;password=password;database=rentaldb";

    protected override async Task OnInitializedAsync()
    {
        rentalList = await GetRentalsAsync();
        filteredRentals = rentalList;
        await LoadCustomers();
        await LoadEquipment();
    }

    private void FilterRentals()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredRentals = rentalList;
        }
        else
        {
            filteredRentals = rentalList.Where(r => r.CustomerID.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                                    r.EquipmentID.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    private async Task<List<Rental>> GetRentalsAsync()
    {
        var rentals = new List<Rental>();

        try
        {
            using var connection = new MySqlConnection(connectionString);
            await connection.OpenAsync();

            using var command = new MySqlCommand("SELECT rental_id, date, customer_id, equipment_id, rental_date, return_date, cost FROM Rentals", connection);
            using var reader = await command.ExecuteReaderAsync();

            while (await reader.ReadAsync())
            {
                rentals.Add(new Rental
                    {
                        RentalID = reader.GetInt32(0),
                        Date = reader.GetDateTime(1),
                        CustomerID = reader.GetInt32(2),
                        EquipmentID = reader.GetInt32(3),
                        RentalDate = reader.GetDateTime(4),
                        ReturnDate = reader.IsDBNull(5) ? (DateTime?)null : reader.GetDateTime(5),
                        Cost = reader.GetDecimal(6)
                    });
            }
        }
        catch (MySqlException ex)
        {
            errorMessage = $"MySQL Error: {ex.Message}";
            showErrorModal = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"General Error: {ex.Message}";
            showErrorModal = true;
        }

        return rentals;
    }

    private async Task LoadCustomers()
    {
        var customers = new List<Customer>();

        try
        {
            using var connection = new MySqlConnection(connectionString);
            await connection.OpenAsync();

            using var command = new MySqlCommand("SELECT customer_id, first_name, last_name, phone, email FROM Customers", connection);
            using var reader = await command.ExecuteReaderAsync();

            while (await reader.ReadAsync())
            {
                customers.Add(new Customer
                    {
                        CustomerId = reader.GetInt32(0),
                        FirstName = reader.GetString(1),
                        LastName = reader.GetString(2),
                        Phone = reader.GetString(3),
                        Email = reader.GetString(4),
                    });
            }
        }
        catch (MySqlException ex)
        {
            errorMessage = $"MySQL Error: {ex.Message}";
            showErrorModal = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"General Error: {ex.Message}";
            showErrorModal = true;
        }

        customerList = customers;
    }

    private async Task LoadEquipment()
    {
        var equipment = new List<EquipmentItem>();

        try
        {
            using var connection = new MySqlConnection(connectionString);
            await connection.OpenAsync();

            using var command = new MySqlCommand("SELECT equipment_id, category_id, name, description, daily_rate FROM Equipment", connection);
            using var reader = await command.ExecuteReaderAsync();

            while (await reader.ReadAsync())
            {
                equipment.Add(new EquipmentItem
                    {
                        EquipmentID = reader.GetInt32(0),
                        CategoryID = reader.GetInt32(1),
                        Name = reader.GetString(2),
                        Description = reader.GetString(3),
                        DailyRate = reader.GetDecimal(4),
                    });
            }
        }
        catch (MySqlException ex)
        {
            errorMessage = $"MySQL Error: {ex.Message}";
            showErrorModal = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"General Error: {ex.Message}";
            showErrorModal = true;
        }

        equipmentList = equipment;
    }

    private void ShowAddRentalModal()
    {
        currentRental = new Rental
            {
                Date = DateTime.Today,
                RentalDate = DateTime.Today,
                ReturnDate = DateTime.Today
            };
        rentalModalTitle = "Add New Rental";
        showRentalModal = true;
    }

    private void ShowEditRentalModal(Rental rental)
    {
        currentRental = rental;
        rentalModalTitle = "Edit Rental";
        showRentalModal = true;
        UpdateCost();
    }

    private void CloseRentalModal()
    {
        showRentalModal = false;
    }

    private void CloseErrorModal()
    {
        showErrorModal = false;
    }

    private async Task AddRentalAsync(Rental rental)
    {
        using var connection = new MySqlConnection(connectionString);
        await connection.OpenAsync();

        using var command = new MySqlCommand("INSERT INTO Rentals (date, customer_id, equipment_id, rental_date, return_date, cost) VALUES (@Date, @CustomerID, @EquipmentID, @RentalDate, @ReturnDate, @Cost)", connection);
        command.Parameters.AddWithValue("@Date", rental.Date);
        command.Parameters.AddWithValue("@CustomerID", rental.CustomerID);
        command.Parameters.AddWithValue("@EquipmentID", rental.EquipmentID);
        command.Parameters.AddWithValue("@RentalDate", rental.RentalDate);
        command.Parameters.AddWithValue("@ReturnDate", rental.ReturnDate);
        command.Parameters.AddWithValue("@Cost", rental.Cost);

        await command.ExecuteNonQueryAsync();
    }

    private async Task DeleteRental(int rentalId)
    {
        try
        {
            await DeleteRentalAsync(rentalId);
            rentalList = await GetRentalsAsync();
            FilterRentals();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            showErrorModal = true;
        }
    }

    private async Task DeleteRentalAsync(int rentalId)
    {
        using var connection = new MySqlConnection(connectionString);
        await connection.OpenAsync();

        using var command = new MySqlCommand("DELETE FROM Rentals WHERE rental_id = @RentalID", connection);
        command.Parameters.AddWithValue("@RentalID", rentalId);

        await command.ExecuteNonQueryAsync();
    }

    private async Task SaveRental()
    {
        if (currentRental.CustomerID == 0 || currentRental.EquipmentID == 0 || currentRental.ReturnDate == default /* || currentRental.Cost <= 0 */)
        {
            errorMessage = "Please fill in all the fields.";
            showErrorModal = true;
            return;
        }

        await UpdateCost(); // Ensure cost is updated before saving

        try
        {
            if (currentRental.RentalID == 0) // Add new rental
            {
                await AddRentalAsync(currentRental);
            }
            else // Update existing rental
            {
                await UpdateRentalAsync(currentRental);
            }

            rentalList = await GetRentalsAsync();
            FilterRentals();
            CloseRentalModal();
        }
        catch (MySqlException ex)
        {
            errorMessage = $"MySQL Error: {ex.Message}";
            showErrorModal = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"General Error: {ex.Message}";
            showErrorModal = true;
        }
    }

    private async Task UpdateRentalAsync(Rental rental)
    {
        try
        {
            using var connection = new MySqlConnection(connectionString);
            await connection.OpenAsync();

            using var command = new MySqlCommand("UPDATE Rentals SET date = @Date, customer_id = @CustomerID, equipment_id = @EquipmentID, rental_date = @RentalDate, return_date = @ReturnDate, cost = @Cost WHERE rental_id = @RentalID", connection);
            command.Parameters.AddWithValue("@RentalID", rental.RentalID);
            command.Parameters.AddWithValue("@Date", rental.Date);
            command.Parameters.AddWithValue("@CustomerID", rental.CustomerID);
            command.Parameters.AddWithValue("@EquipmentID", rental.EquipmentID);
            command.Parameters.AddWithValue("@RentalDate", rental.RentalDate);
            command.Parameters.AddWithValue("@ReturnDate", rental.ReturnDate);
            command.Parameters.AddWithValue("@Cost", rental.Cost);

            await command.ExecuteNonQueryAsync();
        }
        catch (MySqlException ex)
        {
            errorMessage = $"MySQL Error: {ex.Message}";
            showErrorModal = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"General Error: {ex.Message}";
            showErrorModal = true;
        }
    }

    private async Task UpdateCost()
    {
        try
        {
            using var connection = new MySqlConnection(connectionString);
            await connection.OpenAsync();

            using var command = new MySqlCommand("SELECT daily_rate FROM Equipment WHERE equipment_id = @EquipmentID", connection);
            command.Parameters.AddWithValue("@EquipmentID", currentRental.EquipmentID);

            var dailyRate = (decimal?)await command.ExecuteScalarAsync();

            if (dailyRate == null)
            {
                errorMessage = "Error: The specified Equipment ID does not exist.";
                showErrorModal = true;
                currentRental.Cost = 0;
                return;
            }

            if (currentRental.RentalDate == default || currentRental.ReturnDate == null)
            {
                errorMessage = "Error: Rental date and return date must be specified.";
                showErrorModal = true;
                currentRental.Cost = 0;
                return;
            }

            var rentalDays = (currentRental.ReturnDate.Value - currentRental.RentalDate).Days;

            if (rentalDays < 0)
            {
                errorMessage = "Error: Return date cannot be earlier than rental date.";
                showErrorModal = true;
                currentRental.Cost = 0;
                return;
            }

            currentRental.Cost = dailyRate.Value * rentalDays;
        }
        catch (MySqlException ex)
        {
            errorMessage = $"MySQL Error: {ex.Message}";
            showErrorModal = true;
            currentRental.Cost = 0;
        }
        catch (Exception ex)
        {
            errorMessage = $"General Error: {ex.Message}";
            showErrorModal = true;
            currentRental.Cost = 0;
        }
    }




    public class Rental
    {
        public int RentalID { get; set; }
        public DateTime Date { get; set; }
        public int CustomerID { get; set; }
        public int EquipmentID { get; set; }
        public DateTime RentalDate { get; set; }
        public DateTime? ReturnDate { get; set; }
        public decimal Cost { get; set; }
    }

    public class EquipmentItem
    {
        public int EquipmentID { get; set; }
        public int CategoryID { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public decimal DailyRate { get; set; }
    }

    public class Customer
    {
        public int CustomerId { get; set; }
        public string LastName { get; set; }
        public string FirstName { get; set; }
        public string Phone { get; set; }
        public string Email { get; set; }
        public string FullName => $"{FirstName} {LastName}";
    }
}

@* @code {
    private List<Rental> rentalList = new List<Rental>();
    private List<Rental> filteredRentals = new List<Rental>();
    private List<Customer> customerList = new List<Customer>();
    private Rental currentRental = new Rental();
    private bool showRentalModal = false;
    private bool showErrorModal = false;
    private string rentalModalTitle = "";
    private string searchTerm = "";
    private List<EquipmentItem> equipmentList = new List<EquipmentItem>();
    private string errorMessage = "";

    private readonly string connectionString = "server=127.0.0.1;user=root;password=password;database=rentaldb";

    protected override async Task OnInitializedAsync()
    {
        rentalList = await GetRentalsAsync();
        filteredRentals = rentalList;
    }

    private void FilterRentals()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredRentals = rentalList;
        }
        else
        {
            filteredRentals = rentalList.Where(r => r.CustomerID.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                                    r.EquipmentID.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    private async Task<List<Rental>> GetRentalsAsync()
    {
        var rentals = new List<Rental>();

        try
        {
            using var connection = new MySqlConnection(connectionString);
            await connection.OpenAsync();

            using var command = new MySqlCommand("SELECT rental_id, date, customer_id, equipment_id, rental_date, return_date, cost FROM Rentals", connection);
            using var reader = await command.ExecuteReaderAsync();

            while (await reader.ReadAsync())
            {
                rentals.Add(new Rental
                    {
                        RentalID = reader.GetInt32(0),
                        Date = reader.GetDateTime(1),
                        CustomerID = reader.GetInt32(2),
                        EquipmentID = reader.GetInt32(3),
                        RentalDate = reader.GetDateTime(4),
                        ReturnDate = reader.IsDBNull(5) ? (DateTime?)null : reader.GetDateTime(5),
                        Cost = reader.GetDecimal(6)
                    });
            }
        }
        catch (MySqlException ex)
        {
            errorMessage = $"MySQL Error: {ex.Message}";
            showErrorModal = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"General Error: {ex.Message}";
            showErrorModal = true;
        }

        return rentals;
    }

    private async Task LoadCustomers()
    {
        var customers = new List<Customer>();

        try
        {
            using var connection = new MySqlConnection(connectionString);
            await connection.OpenAsync();

            using var command = new MySqlCommand("SELECT customer_id, name FROM Customers", connection);
            using var reader = await command.ExecuteReaderAsync();

            while (await reader.ReadAsync())
            {
                customers.Add(new Customer
                    {
                        CustomerId = reader.GetInt32(0),
                        LastName = reader.GetString(1),
                        FirstName = reader.GetString(2),
                        Phone = reader.GetString(3),
                        Email = reader.GetString(4),
                    });
            }
        }
        catch (MySqlException ex)
        {
            errorMessage = $"MySQL Error: {ex.Message}";
            showErrorModal = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"General Error: {ex.Message}";
            showErrorModal = true;
        }

        customerList = customers;
    }


    private async Task LoadEquipment()
    {
        var equipment = new List<EquipmentItem>();

        try
        {
            using var connection = new MySqlConnection(connectionString);
            await connection.OpenAsync();

            using var command = new MySqlCommand("SELECT equipment_id, category_id, name, description, daily_rate FROM Equipment", connection);
            using var reader = await command.ExecuteReaderAsync();

            while (await reader.ReadAsync())
            {
                equipment.Add(new EquipmentItem
                    {
                        EquipmentID = reader.GetInt32(0),
                        CategoryID = reader.GetInt32(1),
                        Name = reader.GetString(2),
                        Description = reader.GetString(3),
                        DailyRate = reader.GetDecimal(4),
                    });
            }
        }
        catch (MySqlException ex)
        {
            errorMessage = $"MySQL Error: {ex.Message}";
            showErrorModal = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"General Error: {ex.Message}";
            showErrorModal = true;
        }
    }

    private void ShowAddRentalModal()
    {
        currentRental = new Rental
            {
                RentalDate = DateTime.Today,
                ReturnDate = DateTime.Today
            };
        rentalModalTitle = "Add New Rental";
        showRentalModal = true;
    }

    private void ShowEditRentalModal(Rental rental)
    {
        currentRental = rental;
        rentalModalTitle = "Edit Rental";
        showRentalModal = true;
        UpdateCost();
    }


    private void CloseRentalModal()
    {
        showRentalModal = false;
    }

    private void CloseErrorModal()
    {
        showErrorModal = false;
    }


    /// <summary>
    /// This method adds a rental to the database.
    /// </summary>
    /// <param name="rental"></param>
    /// <returns></returns>
    private async Task AddRentalAsync(Rental rental)
    {
        using var connection = new MySqlConnection(connectionString);
        await connection.OpenAsync();

        using var command = new MySqlCommand("INSERT INTO Rentals (date, customer_id, equipment_id, rental_date, return_date, cost) VALUES (@Date, @CustomerID, @EquipmentID, @RentalDate, @ReturnDate, @Cost)", connection);
        command.Parameters.AddWithValue("@Date", rental.Date);
        command.Parameters.AddWithValue("@CustomerID", rental.CustomerID);
        command.Parameters.AddWithValue("@EquipmentID", rental.EquipmentID);
        command.Parameters.AddWithValue("@RentalDate", rental.RentalDate);
        command.Parameters.AddWithValue("@ReturnDate", rental.ReturnDate);
        command.Parameters.AddWithValue("@Cost", rental.Cost);

        await command.ExecuteNonQueryAsync();
    }


    private async Task DeleteRental(int rentalId)
    {
        try
        {
            await DeleteRentalAsync(rentalId);
            rentalList = await GetRentalsAsync();
            FilterRentals();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            showErrorModal = true;
        }
    }


    /// <summary>
    /// This method deletes a rental from the database.
    /// </summary>
    /// <param name="rentalId"></param>
    /// <returns></returns>
    private async Task DeleteRentalAsync(int rentalId)
    {
        using var connection = new MySqlConnection(connectionString);
        await connection.OpenAsync();

        using var command = new MySqlCommand("DELETE FROM Rentals WHERE rental_id = @RentalID", connection);
        command.Parameters.AddWithValue("@RentalID", rentalId);

        await command.ExecuteNonQueryAsync();
    }

    private async Task SaveRental()
    {
        if (currentRental.CustomerID == 0 || currentRental.EquipmentID == 0 || currentRental.RentalDate == default || currentRental.Cost <= 0)
        {
            errorMessage = "Please fill in all the fields.";
            showErrorModal = true;
            return;
        }

        UpdateCost(); // Ensure cost is updated before saving

        try
        {
            if (currentRental.RentalID == 0) // Add new rental
            {
                await AddRentalAsync(currentRental);
            }
            else // Update existing rental
            {
                await UpdateRentalAsync(currentRental);
            }

            rentalList = await GetRentalsAsync();
            FilterRentals();
            CloseRentalModal();
        }
        catch (MySqlException ex)
        {
            errorMessage = $"MySQL Error: {ex.Message}";
            showErrorModal = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"General Error: {ex.Message}";
            showErrorModal = true;
        }
    } *@



@* 
    // private async Task SaveRentalsToFile()
    // {
    //     var csvFile = "rentals.csv";
    //     var lines = new List<string> { "RentalID,Date,CustomerID,EquipmentID,RentalDate,ReturnDate,Cost" };
    //     lines.AddRange(rentalList.Select(r => $"{r.RentalID},{r.Date},{r.CustomerID},{r.EquipmentID},{r.RentalDate},{r.ReturnDate},{r.Cost}"));
    //     await File.WriteAllLinesAsync(csvFile, lines);
    // }

    // private async Task DeleteRental(Rental rental)
    // {
    //     try
    //     {
    //         rentalList.Remove(rental);
    //         await SaveRentalsToFile();
    //     }
    //     catch (Exception ex)
    //     {
    //         Console.Error.WriteLine($"Error deleting rental: {ex.Message}");
    //     }
    // }


    /// <summary>
    /// This method updates the cost of the rental based on the daily rate of the equipment.
    /// </summary>
    /// <param name="rental"></param>
    /// <returns></returns>
    private async Task UpdateRentalAsync(Rental rental)
    {
        try
        {
            using var connection = new MySqlConnection(connectionString);
            await connection.OpenAsync();

            using var command = new MySqlCommand("UPDATE Rentals SET date = @Date, customer_id = @CustomerID, equipment_id = @EquipmentID, rental_date = @RentalDate, return_date = @ReturnDate, cost = @Cost WHERE rental_id = @RentalID", connection);
            command.Parameters.AddWithValue("@RentalID", rental.RentalID);
            command.Parameters.AddWithValue("@Date", rental.Date);
            command.Parameters.AddWithValue("@CustomerID", rental.CustomerID);
            command.Parameters.AddWithValue("@EquipmentID", rental.EquipmentID);
            command.Parameters.AddWithValue("@RentalDate", rental.RentalDate);
            command.Parameters.AddWithValue("@ReturnDate", rental.ReturnDate);
            command.Parameters.AddWithValue("@Cost", rental.Cost);

            await command.ExecuteNonQueryAsync();
        }
        catch (MySqlException ex)
        {
            errorMessage = $"MySQL Error: {ex.Message}";
            showErrorModal = true;
        }
        catch (Exception ex)
        {
            errorMessage = $"General Error: {ex.Message}";
            showErrorModal = true;
        }
    }

    private void UpdateCost()
    {
        var equipment = equipmentList.FirstOrDefault(e => e.EquipmentID == currentRental.EquipmentID);
        if (equipment == null)
        {
            errorMessage = "Error: The specified Equipment ID does not exist.";
            showErrorModal = true;
            return;
        }

        if (currentRental.RentalDate == default || currentRental.ReturnDate == null)
        {
            errorMessage = "Error: Rental date and return date must be specified.";
            showErrorModal = true;
            return;
        }

        var rentalDays = (currentRental.ReturnDate.Value - currentRental.RentalDate).Days;

        if (rentalDays < 0)
        {
            errorMessage = "Error: Return date cannot be earlier than rental date.";
            showErrorModal = true;
            currentRental.Cost = 0;
            return;
        }

        currentRental.Cost = equipment.DailyRate * rentalDays;
    }



    public class Rental
    {
        public int RentalID { get; set; }
        public DateTime Date { get; set; }
        public int CustomerID { get; set; }
        public int EquipmentID { get; set; }
        public DateTime RentalDate { get; set; }
        public DateTime? ReturnDate { get; set; }
        public decimal Cost { get; set; }
    }

    public class EquipmentItem
    {
        public int EquipmentID { get; set; }
        public int CategoryID { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public decimal DailyRate { get; set; }
    }

    public class Customer
    {
        public int CustomerId { get; set; }
        public string LastName { get; set; }
        public string FirstName { get; set; }
        public string Phone { get; set; }
        public string Email { get; set; }
        public string FullName => $"{FirstName} {LastName}";
    }
}
} *@
